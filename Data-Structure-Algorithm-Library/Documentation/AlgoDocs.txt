Hey,I am Aakash, the Creator of this Library. It is Collection Some Sorting Algos.
1)BubbleSort (Iterative)
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode error;
int *x,req;
int i;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
x=(int *)malloc(sizeof(int)*req);
if(x==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
bubbleSort(x,0,req-1,sizeof(int),&error,INTComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(x);
return 0;
}
else
{
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
}
return 0;
}
Here is Another Example Where we Sort Struct student type Data

#include<stdio.h>
#include<stdlib.h>
#include<algo.h>

typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
ErrorCode error;
Student *s,*j;
int req;
int i;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
bubbleSort(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
1.2)BubbleSortRecursive (Recursive)
Here is Acutall Example to use this library;
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
OperationDetail err;
int *x,req,i;
printf("Enter your requriement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
bubbleSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
else printf("unable to sort\n");
free(x);
return 0;
}
Here is Another Example Where we Sort Struct student type Data
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
OperationDetail error;
Student *s,*j;
int req;
int i,ch;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
bubbleSortRecursive(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
2)LinearSort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
}
printf("Sorting Using Linear Sort\n");
linearSort(x,0,req-1,sizeof(int),&err,INTComparator); 
if(err.succ==true) printf("Your collection is successfully\n");
else printf("unable to sort your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}
2.1) linearSortRecursive (Recursive)
Here is Another Example Where we Sort Struct student type Data:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
OperationDetail error;
Student *s,*j;
int req;
int i,ch;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
bubbleSortRecursive(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
OperationDetail err;
int *x,req,i;
printf("Enter your requriement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
linearSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ)
{
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
}
else
{
printf("unable to sort\n");
printf("code is: %d\n",err.code);
}
free(x);
return 0;
}

3)Selection Sort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter the Number: ");
scanf("%d",&x[i]);
}
selectionSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ==false) printf("Something Wrong\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
3.1)Selection Sort (Recursive)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>

typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
OperationDetail error;
Student *s,*j;
int req;
int i,ch;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
selectionSortRecursive(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
Here is Another Example Where we Sort Struct student type Data:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
OperationDetail err;
int *x,req,i;
printf("Enter your requriement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
printf("using ssr\n");
selectionSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ)
{
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
}
else
{
printf("unable to sort\n");
printf("code is: %d\n",err.code);
}
free(x);
return 0;
}
4)Insertion Sort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter yout requirment: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
printf("using Insertion Sort\n");
insertionSort(ptr,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ==false) printf("Something wrong check error code\n");
else printf("Your collection is sorted\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
4.1)Insertion Sort (Recursive)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
OperationDetail err;
int *x,req,i;
printf("Enter your requriement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
printf("using insertion sort recursive\n");
insertionSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ)
{
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
}
else
{
printf("unable to sort\n");
printf("code is: %d\n",err.code);
}
free(x);
return 0;
}
Here is Another Example Where we Sort Struct student type Data:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>

typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
OperationDetail error;
Student *s,*j;
int req;
int i,ch;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
insertionSortRecursive(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
4.2) Insertion Sort (DoublyLinkedList) (CURRENTLY NOT AVAILABLE)
Here is Actuall Example:
#include<stdio.h>
#include<ds.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
OperationDetail error;
DoublyLinkedList *dll;
DoublyLinkedListIterator iter0,iter1;
int num,n,i;
dll=createDoublyLinkedList(sizeof(int),&error);
if(error.succ==false)
{
printf("Code: %d\n",error.code);
return 0;
}
for(i=10;i>=1;i--) addToDoublyLinkedList(dll,&i,&error);
iter0=getDoublyLinkedListIterator(dll,&error);
if(error.succ==true)
{
while(hasNextInDoublyLinkedList(&iter0))
{
getNextElementFromDoublyLinkedList(&iter0,&num,&error);
printf("%d\n",num);
}
}
printf("Before applying Sorting algo\n");
insertionSortForDLL(dll,0,9,&error,INTComparator);
printf("After applying sorting algo\n");
iter1=getDoublyLinkedListIterator(dll,&error);
if(error.succ==true)
{
while(hasNextInDoublyLinkedList(&iter1))
{
getNextElementFromDoublyLinkedList(&iter1,&n,&error);
printf("%d\n",n);
}
}
destroyDoublyLinkedList(dll);
return 0;
}
5)Quick Sort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number :");
scanf("%d",&x[i]);
}
quickSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) printf("Your collection is sorted\n");
else printf("Something wrong error code is: %d\n",err.code);
for(i=0;i<req;i++) printf("%d\n",x[i]);
return 0;
}
5.1)Quick Sort Recursive (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number :");
scanf("%d",&x[i]);
}
quickSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) printf("Your collection is sorted\n");
else printf("Something wrong error code is: %d\n",err.code);
for(i=0;i<req;i++) printf("%d\n",x[i]);
return 0;
}

6) Merge Sort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
mergeSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) printf("your collection is Sorted\n");
else printf("something wrong check error code\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
6.1) Merge Sort (Recursive) 
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
mergeSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) printf("your collection is Sorted\n");
else printf("something wrong check error code\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
7) Heap Sort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
}
printf("Sorting Using heap Sort\n");
heapSort(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ==true) printf("Your collection is successfully\n");
else printf("unable to sort your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}
7.1) Heap Sort (Recursive)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
OperationDetail err;
int *x,req,i;
printf("Enter your requriement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
heapSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
else printf("unable to sort\n");
free(x);
return 0;
}
Here is Another Example Where we Sort Struct student type Data
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
OperationDetail error;
Student *s,*j;
int req;
int i,ch;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
heapSortRecursive(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
8) RadixSort (Only int data type) // Only Iterative Approach
	=>The Radix Sort Algo Take 6 Arguments
	    a) Base Address of Collection
	    b) value of lowerBound
	    c) value of upperbound
	    d) size of 1 Element
	    e) pass address of struct errorCode type structure
	    f) pass ACC or DEC, ACC number means
		you want to sort in 	ACCENDING ORDER, 
		DEC means you want to sort in DECCENDING ORDER
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int main()
{
OperationDetail err;
int *x,req,i;
printf("Enter your requirement: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter a Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
printf("Sorting Using Radix Sort\n");
radixSort(x,0,req-1,sizeof(int),&err,DEC);
if(err.succ==true) printf("Your collection is successfully\n");
else printf("unable to sort your collection check on error code %d\n",err.code);
for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
free(x);
return 0;
}
9) Shell Sort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter yout requirment: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
printf("using shell Sort\n");
shellSort(x,4,req-1,sizeof(int),&err,INTComparator);
if(err.succ==false) printf("Something wrong check error code\n");
else printf("Your collection is sorted\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}
10.1) Shell Sort (Recursive)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter yout requirment: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
printf("using shell Sort\n");
shellSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ==false) printf("Something wrong check error code\n");
else printf("Your collection is sorted\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}

9) Count Sort (Only For array-Collection NO LINKED LIST RIGHT NOW)
	=>The Count Sort Algo Take 4 Arguments
	    a) Base Address of Collection
	    b) Lower Bound where starting index is 0 negative indices not allowed
	    c) upper Bound where last Element is Included. Out of Boundation causing you error.
	    d) size of 1 Element
	    e) pass address of struct ErrorCode type structure
	    f) address of the comparator function (boolian predicate)
	=>Comparator Function
	*This Comparator function are written by Who wants to use the 
	  libaray..
Guidlines for Comparator Function(boolian predicate)-
1)return type always int type;
2)parameter Should always (void *,void *).
3)if left pointer points to data is EQAUL to right pointer points data then
return 0
4)if left pointer pointer data is greater then return +ve;
5)if letf pointer pointer data is lesser them return -ve
ex:
int  comparator_name(void *,void *);
		      ^       ^
		      |         |
		it act like  it act like
	          left operand  right operand
Here is Acutall Example to use this library:
#include<stdio.h>
#include<algo.h>
#include<stdlib.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode err;
int *x,req,i;
printf("Enter yout requirment: ");
scanf("%d",&req);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
printf("using shell Sort\n");
countSort(x,4,req-1,sizeof(int),&err,ACC);
if(err.succ==false) printf("Something wrong check error code\n");
else printf("Your collection is sorted\n");
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
return 0;
}

10) pancakeSort (Iterative)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
ErrorCode error;
int *x,req;
int i;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
x=(int *)malloc(sizeof(int)*req);
if(x==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
}
pancakeSort(x,0,req-1,sizeof(int),&error,INTComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(x);
return 0;
}
else
{
for(i=0;i<req;i++) printf("%d\n",x[i]);
free(x);
}
return 0;
}
Here is Another Example Where we Sort Struct student type Data

#include<stdio.h>
#include<stdlib.h>
#include<algo.h>

typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
ErrorCode error;
Student *s,*j;
int req;
int i;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
pancakeSort(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
10.1) PancakeSort (Recurisve)
Here is Acutall Example to use this library:
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
int INTComparator(void *left,void *right)
{
int *i,*j;
i=(int *)left;
j=(int *)right;
return (*i)-(*j);
}
int main()
{
OperationDetail err;
int *x,req,i;
printf("Enter your requriement: ");
scanf("%d",&req);
fflush(stdin);
if(req<=0) return 0;
x=(int *)malloc(sizeof(int)*req);
if(x==NULL) return 0;
for(i=0;i<req;i++)
{
printf("Enter an Number: ");
scanf("%d",&x[i]);
fflush(stdin);
}
pancakeSortRecursive(x,0,req-1,sizeof(int),&err,INTComparator);
if(err.succ) for(i=0;i<req;i++) printf("Element: %d\n",x[i]);
else printf("unable to sort\n");
free(x);
return 0;
}
Here is Another Example Where we Sort Struct student type Data
#include<stdio.h>
#include<stdlib.h>
#include<algo.h>
typedef struct student
{
int roll;
char name[32];
}Student;

int studentComparator(void *left,void *right) // (boolian predicate)
{
Student *s1,*s2;
s1=(Student *)left;
s2=(Student *)right;
return s1->roll-s2->roll;
}
int main()
{
OperationDetail error;
Student *s,*j;
int req;
int i,ch;
int sizeOfOneElement;
printf("enter the requiremnt: ");
scanf("%d",&req);
if(req<=0)
{
printf("Invaild request\n");
return 0;
}
s=(Student *)malloc(sizeof(Student)*req);
j=s;
if(s==NULL)
{
printf("insuffient space in memory\n");
return 0;
}
for(i=0;i<req;i++)
{
printf("Enter the Roll Number: ");
scanf("%d",&j->roll);
printf("Enter the name: ");
scanf("%s",j->name);
j++;
}
sizeOfOneElement=sizeof(Student);
pancakeSortRecursive(s,0,req-1,sizeOfOneElement,&error,studentComparator);
if(error.succ==false)
{
printf("I unable to Sort Your collection,Check Error Code\n");
printf("Error code is: %d\n",error.code);
free(s);
return 0;
}
else
{
for(i=0;i<req;i++) printf("Name: %s,RollNumber: %d\n",s[i].name,s[i].roll);
free(s);
}
return 0;
}
11) AddressCalculation Sort (Only int data type) // Only Iterative Approach
	=>The addressCalculation Sort Algo Take 6 Arguments
	    a) Base Address of Collection
	    b) value of lowerBound
	    c) value of upperbound
	    d) size of 1 Element
	    e) pass address of struct errorCode type structure
	    f) pass ACC or DEC, ACC number means
		you want to sort in 	ACCENDING ORDER, 
		DEC means you want to sort in DECCENDING ORDER
Here is Acutall Example to use this library:
#include<stdio.h>
#include<ds.h>
#include<stdlib.h>
#include<algo.h>
int main()
{
OperationDetail err;
int i;
int x[10]={1,2,3,4,5,6,7,8,9,10};
printf("Before apply sorting algo\n");
for(i=0;i<=9;i++) printf("%d\n",x[i]);
addressCalculationSort(x,0,9,sizeof(int),&err,DEC);
if(err.succ==false)
{
printf("Something wrong, code: %d\n",err.code);
}
printf("After apply sorting algo\n");
for(i=0;i<=9;i++) printf("%d\n",x[i]);
return 0;
}